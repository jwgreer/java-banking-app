/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package edu.weber.cs3230.projects.finalproject;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author zycmm
 */
public class TransferDialog extends javax.swing.JDialog {

    /**
     * Creates new form TransferDialog
     */
    public TransferDialog(java.awt.Frame parent, boolean modal, BankAccount account, List<Customer> customers) {
        super(parent, modal);
        initComponents();
        this.account = account;
        this.customers = customers;
        int bankaccount = 0;
        
        setUpBankAccountRepository();
        fromAccountTextField.setText(String.valueOf(account.getAccountNumber()));
        setLocationRelativeTo(parent);
    }
    
    private void setUpBankAccountRepository()
    {
        List<BankAccount> accounts = new ArrayList<>();
        for(Customer customer : customers)
        {
            accounts.addAll(customer.getBankAccounts());
        }
        
        this.bankAccountRepository = new BankAccountRepository(accounts);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fromAccountLabel = new javax.swing.JLabel();
        fromAccountTextField = new javax.swing.JTextField();
        toAccountLabel = new javax.swing.JLabel();
        toAccountTextField = new javax.swing.JTextField();
        transferAmountLabel = new javax.swing.JLabel();
        transferAmountTextField = new javax.swing.JTextField();
        transferOKButton = new javax.swing.JButton();
        transferCancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(4, 2, 5, 5));

        fromAccountLabel.setText("From Account Number:");
        getContentPane().add(fromAccountLabel);
        getContentPane().add(fromAccountTextField);

        toAccountLabel.setText("To Account Number:");
        getContentPane().add(toAccountLabel);
        getContentPane().add(toAccountTextField);

        transferAmountLabel.setText("Transfer Amount");
        getContentPane().add(transferAmountLabel);
        getContentPane().add(transferAmountTextField);

        transferOKButton.setText("OK");
        transferOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferOKButtonActionPerformed(evt);
            }
        });
        getContentPane().add(transferOKButton);

        transferCancelButton.setText("Cancel");
        transferCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferCancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(transferCancelButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void transferCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferCancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_transferCancelButtonActionPerformed

    private void transferOKButtonActionPerformed(java.awt.event.ActionEvent evt) {
        StringBuilder warnings = new StringBuilder();
        BankAccount sourceAccount = null;
        BankAccount targetAccount = null;
        BigDecimal sourceAccountBalance = new BigDecimal(0);
        BigDecimal targetAccountBalance = new BigDecimal(0);
        BigDecimal newBalance = new BigDecimal(0);

        // Retrieve input from your UI (replace with actual UI component references)
        String sourceAccountNumberInput = fromAccountTextField.getText();
        String targetAccountNumberInput = toAccountTextField.getText();
        String transferAmountInput = transferAmountTextField.getText();
        BigDecimal transferAmount = new BigDecimal(transferAmountInput);

        try {
            int sourceAccountNumber = Integer.parseInt(sourceAccountNumberInput);
            int targetAccountNumber = Integer.parseInt(targetAccountNumberInput);


            // Retrieve the accounts from the repository
            sourceAccount = bankAccountRepository.findByAccountNumber(sourceAccountNumber);
            sourceAccountBalance = sourceAccount.getBalance();
            targetAccount = bankAccountRepository.findByAccountNumber(targetAccountNumber);
            targetAccountBalance = targetAccount.getBalance();
            newBalance = sourceAccountBalance.subtract(transferAmount);


            try {
                sourceAccount.withdraw(transferAmount);
                if (newBalance.compareTo(BigDecimal.ZERO) < 0) {
                    warnings.append("Error cannot withdraw more than you have.\n");
                }

            } catch (InsufficientFundException e) {
                warnings.append("Error during withdrawal.\n");
            }

            // Rest of your transfer code
        } catch (NoSuchBankAccountException e) {
            warnings.append("Error during withdrawal.\n");
        } catch (NumberFormatException e) {
            // Handle the case where the input is not a valid integer
            warnings.append("Error during withdrawal.\n");
        }

        if (warnings.length() > 0) {
            JOptionPane.showMessageDialog(this, warnings.toString(), "Transfer Warnings", JOptionPane.WARNING_MESSAGE);
        } else {
            // Perform deposit to the target account
            targetAccount.deposit(transferAmount);
            this.dispose();
        }
    }//GEN-LAST:event_transferOKButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fromAccountLabel;
    private javax.swing.JTextField fromAccountTextField;
    private javax.swing.JLabel toAccountLabel;
    private javax.swing.JTextField toAccountTextField;
    private javax.swing.JLabel transferAmountLabel;
    private javax.swing.JTextField transferAmountTextField;
    private javax.swing.JButton transferCancelButton;
    private javax.swing.JButton transferOKButton;
    // End of variables declaration//GEN-END:variables
    
    private BankAccount account;
    private Customer customer;

    private BankAccountRepository repo;
    private List<Customer> customers;
    private BankAccountRepository bankAccountRepository;
}
